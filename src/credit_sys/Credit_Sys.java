/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package credit_sys;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.UnderlineStyle;
import jxl.write.Colour;
import jxl.write.Font;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Melons
 */
public class Credit_Sys extends javax.swing.JFrame {

    public void clearJTable() {
        DefaultTableModel dm = new javax.swing.table.DefaultTableModel();
        int n = dm.getRowCount() - 1;
        while (n-- > 0) {
            dm.removeRow(1);
        }
    }

    /**
     * Creates new form NewJFrame
     */
    public Credit_Sys() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        success_info = new javax.swing.JOptionPane();
        imp_file2 = new javax.swing.JTextField();
        imp_confirm1 = new javax.swing.JButton();
        imp_confirm2 = new javax.swing.JButton();
        imp_file1 = new javax.swing.JTextField();
        findByIdTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        findByDateTextFieldEnd = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox();
        findByDateTextFieldBegin = new javax.swing.JTextField();
        jTextFieldShowInfo = new javax.swing.JTextField();
        del_date = new javax.swing.JTextField();
        del_del = new javax.swing.JButton();
        exp_CB = new javax.swing.JComboBox();
        del_display = new javax.swing.JButton();
        jComboBox5 = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        imp_CB1 = new javax.swing.JComboBox();
        imp_CB2 = new javax.swing.JComboBox();
        imp_choose1 = new javax.swing.JButton();
        imp_choose2 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        del_list = new javax.swing.JList();
        exp_display = new javax.swing.JButton();
        del_choose = new javax.swing.JComboBox();
        exp_file = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        exp_choose = new javax.swing.JButton();
        exp_confirm = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        exp_list1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imp_file2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        getContentPane().add(imp_file2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 206, 30));

        imp_confirm1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        imp_confirm1.setText("导入基本数据");
        imp_confirm1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imp_confirm1ActionPerformed(evt);
            }
        });
        getContentPane().add(imp_confirm1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 120, 30));

        imp_confirm2.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        imp_confirm2.setText("导入803数据");
        imp_confirm2.setMinimumSize(new java.awt.Dimension(105, 23));
        imp_confirm2.setPreferredSize(new java.awt.Dimension(105, 23));
        imp_confirm2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imp_confirm2ActionPerformed(evt);
            }
        });
        getContentPane().add(imp_confirm2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 80, 120, 30));

        imp_file1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        getContentPane().add(imp_file1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 206, 30));

        findByIdTextField.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        findByIdTextField.setForeground(new java.awt.Color(153, 153, 153));
        findByIdTextField.setText("输入要查的身份证号");
        findByIdTextField.setToolTipText("");
        findByIdTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findByIdTextFieldMouseClicked(evt);
            }
        });
        getContentPane().add(findByIdTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 204, 30));

        jButton1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jButton1.setText("点击查询");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 170, -1, 30));

        findByDateTextFieldEnd.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        findByDateTextFieldEnd.setForeground(new java.awt.Color(153, 153, 153));
        findByDateTextFieldEnd.setText("查询的结束日期");
        findByDateTextFieldEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findByDateTextFieldEndMouseClicked(evt);
            }
        });
        getContentPane().add(findByDateTextFieldEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, -1, 30));

        jButton2.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jButton2.setText("点击查询");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, -1, 30));

        jComboBox1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00:00 - 24:00", "08:00 - 10:00", "10:00 - 12:00", "12:00 - 14:00", "14:00 - 16:00", "16:00 - 21:00" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 210, -1, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel()
        );
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 272, 1293, 250));

        jComboBox2.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "工商银行", "交通银行" }));
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 210, -1, 30));

        findByDateTextFieldBegin.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        findByDateTextFieldBegin.setForeground(new java.awt.Color(153, 153, 153));
        findByDateTextFieldBegin.setText("查询的开始日期");
        findByDateTextFieldBegin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findByDateTextFieldBeginMouseClicked(evt);
            }
        });
        getContentPane().add(findByDateTextFieldBegin, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, 30));

        jTextFieldShowInfo.setForeground(new java.awt.Color(153, 153, 153));
        jTextFieldShowInfo.setText("此处显示查询，删除状态");
        jTextFieldShowInfo.setToolTipText("");
        getContentPane().add(jTextFieldShowInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 143, -1));

        del_date.setForeground(new java.awt.Color(153, 153, 153));
        del_date.setText("选择待删批次的日期");
        del_date.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                del_dateMouseClicked(evt);
            }
        });
        getContentPane().add(del_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 210, -1, 30));

        del_del.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        del_del.setText("删除");
        del_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del_delActionPerformed(evt);
            }
        });
        getContentPane().add(del_del, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 210, -1, 30));

        exp_CB.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        exp_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "工商银行", "交通银行" }));
        getContentPane().add(exp_CB, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 10, -1, 30));

        del_display.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        del_display.setText("显示可删除批次");
        del_display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del_displayActionPerformed(evt);
            }
        });
        getContentPane().add(del_display, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 210, -1, 30));

        jComboBox5.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "工商银行", "交通银行" }));
        getContentPane().add(jComboBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, -1, 30));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 133, 1328, 10));

        imp_CB1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        imp_CB1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "工商银行", "交通银行" }));
        getContentPane().add(imp_CB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, -1, 30));

        imp_CB2.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        imp_CB2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "工商银行", "交通银行" }));
        getContentPane().add(imp_CB2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, -1, 30));

        imp_choose1.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        imp_choose1.setText("浏览");
        imp_choose1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imp_choose1ActionPerformed(evt);
            }
        });
        getContentPane().add(imp_choose1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, -1, 30));

        imp_choose2.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        imp_choose2.setText("浏览");
        imp_choose2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imp_choose2ActionPerformed(evt);
            }
        });
        getContentPane().add(imp_choose2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, -1, 30));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(653, 0, 13, 270));

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel1.setText("删除");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 140, -1, -1));

        jLabel2.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel2.setText("导入");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel3.setText("查询");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        del_list.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        del_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(del_list);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 140, 70, 130));

        exp_display.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        exp_display.setText("显示可导出批次");
        exp_display.setMinimumSize(new java.awt.Dimension(131, 23));
        exp_display.setPreferredSize(new java.awt.Dimension(131, 23));
        exp_display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp_displayActionPerformed(evt);
            }
        });
        getContentPane().add(exp_display, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, -1, 30));

        del_choose.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        del_choose.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "工商银行", "交通银行" }));
        getContentPane().add(del_choose, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 160, -1, 30));
        getContentPane().add(exp_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 90, 220, 30));

        jLabel4.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel4.setText("导出路径:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 60, -1, -1));

        exp_choose.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        exp_choose.setText("浏览");
        exp_choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp_chooseActionPerformed(evt);
            }
        });
        getContentPane().add(exp_choose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 90, -1, 30));

        exp_confirm.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        exp_confirm.setText("导出");
        exp_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp_confirmActionPerformed(evt);
            }
        });
        getContentPane().add(exp_confirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 90, -1, 30));

        jLabel5.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel5.setText("导出");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, -1, -1));

        exp_list1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        exp_list1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(exp_list1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, 130, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imp_confirm1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_confirm1ActionPerformed
        String f_path = imp_file1.getText();
        if (f_path.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "请选择导入文件！");
        } else {
            String bank = imp_CB1.getSelectedItem().toString();
            if (bank.equals("工商银行")) {
                if (ParseFile.importData(f_path, (short) 0)) {
                    JOptionPane.showMessageDialog(rootPane, "导入成功！");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "导入失败！");
                }
            } else if (bank.equals("交通银行")) {
                if (ParseFile.importData(f_path, (short) 2)) {
                    JOptionPane.showMessageDialog(rootPane, "导入成功！");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "导入失败！");
                }
            }
        }
    }//GEN-LAST:event_imp_confirm1ActionPerformed

    private void imp_confirm2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_confirm2ActionPerformed
        String f_path = imp_file2.getText();
        if (f_path.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "请选择导入文件！");
        } else {
            String bank = imp_CB2.getSelectedItem().toString();
            if (bank.equals("工商银行")) {
                if (ParseFile.importData(f_path, (short) 1)) {
                    JOptionPane.showMessageDialog(rootPane, "导入成功！");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "导入失败！");
                }
            } else if (bank.equals("交通银行")) {
                if (ParseFile.importData(f_path, (short) 3)) {
                    JOptionPane.showMessageDialog(rootPane, "导入成功！");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "导入失败！");
                }
            }
        }
    }//GEN-LAST:event_imp_confirm2ActionPerformed

    private void findByIdTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findByIdTextFieldMouseClicked
        // TODO add your handling code here:
        findByIdTextField.setText(null);
    }//GEN-LAST:event_findByIdTextFieldMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //通过日期查询数据
        String time = (String) jComboBox1.getSelectedItem();
        String bank = (String) jComboBox2.getSelectedItem();
        Vector<String> columnIdentifiers = new Vector<String>();
        Vector<Vector<Object>> dataVector = new Vector<Vector<Object>>();
        String value1 = findByDateTextFieldBegin.getText();
        String value2 = findByDateTextFieldEnd.getText();
        ResultSet rs = DBUtil.lookUpByDateTimeBank(value1, value2, time, bank);
        if (rs != null) {
            jTextFieldShowInfo.setText("成功获取数据");
            try {
                if (bank.equals("工商银行")) {
                    columnIdentifiers.add("证件类型");
                    columnIdentifiers.add("证件号码");
                    columnIdentifiers.add("姓名");
                    columnIdentifiers.add("住宅地址市县");
                    columnIdentifiers.add("住宅地址区");
                    columnIdentifiers.add("住宅地址");
                    columnIdentifiers.add("住宅电话区号");
                    columnIdentifiers.add("住宅电话");
                    columnIdentifiers.add("手机");
                    columnIdentifiers.add("单位全称");
                    columnIdentifiers.add("犯罪记录A");
                    columnIdentifiers.add("犯罪记录B");
                    columnIdentifiers.add("犯罪记录C");
                    columnIdentifiers.add("本地户籍");
                    columnIdentifiers.add("本地居住证");
                    columnIdentifiers.add("已登记但未办证");
                    columnIdentifiers.add("其他");
                    columnIdentifiers.add("户籍地址一致");
                    columnIdentifiers.add("居住地址一致");
                    columnIdentifiers.add("登记宅电一致");
                    columnIdentifiers.add("登记手机一致");
                    columnIdentifiers.add("登记单位一致");
                    columnIdentifiers.add("社保缴费状态");
                    columnIdentifiers.add("申请人单位一致");
                    columnIdentifiers.add("拥有车辆");
                    columnIdentifiers.add("日期");
                    columnIdentifiers.add("时间");
                    while (rs.next()) {
                        Vector<Object> vec = new Vector<Object>();
                        for (int i = 2; i <= 28; i++) {
                            vec.add(rs.getString(i));
                        }
                        dataVector.add(vec);
                    }
                } else {
                    columnIdentifiers.add("身份证姓名");
                    columnIdentifiers.add("身份证号码");
                    columnIdentifiers.add("手机号码");
                    columnIdentifiers.add("注册时间");
                    columnIdentifiers.add("驾驶证档案号");
                    columnIdentifiers.add("犯罪记录A");
                    columnIdentifiers.add("犯罪记录B");
                    columnIdentifiers.add("犯罪记录C");
                    columnIdentifiers.add("本地户籍");
                    columnIdentifiers.add("本地居住证");
                    columnIdentifiers.add("已登记但未办证");
                    columnIdentifiers.add("其他");
                    columnIdentifiers.add("登记宅电一致");
                    columnIdentifiers.add("登记手机一致");
                    columnIdentifiers.add("驾驶证档案号一致");
                    columnIdentifiers.add("日期");
                    columnIdentifiers.add("时间");
                    while (rs.next()) {
                        Vector<Object> vec = new Vector<Object>();
                        for (int i = 2; i <= 18; i++) {
                            vec.add(rs.getString(i));
                        }
                        dataVector.add(vec);
                    }
                    rs.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(Credit_Sys.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jTextFieldShowInfo.setText("查找失败");
        }
        DefaultTableModel dm = new javax.swing.table.DefaultTableModel();
        dm.setDataVector(dataVector, columnIdentifiers);
        jTable1.setModel(dm);
        dm.fireTableStructureChanged();
        dm.fireTableDataChanged();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //TODO add your handling code here:
        //通过身份证ID查询
        Vector<String> columnIdentifiers = new Vector<String>();
        Vector<Vector<Object>> dataVector = new Vector<Vector<Object>>();
        String value = findByIdTextField.getText();
        String bank = (String) jComboBox5.getSelectedItem();
        ResultSet rs = DBUtil.lookUpByIdCard(value, bank);
        if (rs != null) {
            jTextFieldShowInfo.setText("成功获取数据");
            try {
                if (bank.equals("工商银行")) {
                    columnIdentifiers.add("证件类型");
                    columnIdentifiers.add("证件号码");
                    columnIdentifiers.add("姓名");
                    columnIdentifiers.add("住宅地址市县");
                    columnIdentifiers.add("住宅地址区");
                    columnIdentifiers.add("住宅地址");
                    columnIdentifiers.add("住宅电话区号");
                    columnIdentifiers.add("住宅电话");
                    columnIdentifiers.add("手机");
                    columnIdentifiers.add("单位全称");
                    columnIdentifiers.add("犯罪记录A");
                    columnIdentifiers.add("犯罪记录B");
                    columnIdentifiers.add("犯罪记录C");
                    columnIdentifiers.add("本地户籍");
                    columnIdentifiers.add("本地居住证");
                    columnIdentifiers.add("已登记但未办证");
                    columnIdentifiers.add("其他");
                    columnIdentifiers.add("户籍地址一致");
                    columnIdentifiers.add("居住地址一致");
                    columnIdentifiers.add("登记宅电一致");
                    columnIdentifiers.add("登记手机一致");
                    columnIdentifiers.add("登记单位一致");
                    columnIdentifiers.add("社保缴费状态");
                    columnIdentifiers.add("申请人单位一致");
                    columnIdentifiers.add("拥有车辆");
                    columnIdentifiers.add("日期");
                    columnIdentifiers.add("时间");
                    while (rs.next()) {
                        Vector<Object> vec = new Vector<Object>();
                        for (int i = 2; i <= 28; i++) {
                            vec.add(rs.getString(i));
                        }
                        dataVector.add(vec);
                    }
                } else {
                    columnIdentifiers.add("身份证姓名");
                    columnIdentifiers.add("身份证号码");
                    columnIdentifiers.add("手机号码");
                    columnIdentifiers.add("注册时间");
                    columnIdentifiers.add("驾驶证档案号");
                    columnIdentifiers.add("犯罪记录A");
                    columnIdentifiers.add("犯罪记录B");
                    columnIdentifiers.add("犯罪记录C");
                    columnIdentifiers.add("本地户籍");
                    columnIdentifiers.add("本地居住证");
                    columnIdentifiers.add("已登记但未办证");
                    columnIdentifiers.add("其他");
                    columnIdentifiers.add("登记宅电一致");
                    columnIdentifiers.add("登记手机一致");
                    columnIdentifiers.add("驾驶证档案号一致");
                    columnIdentifiers.add("日期");
                    columnIdentifiers.add("时间");
                    while (rs.next()) {
                        Vector<Object> vec = new Vector<Object>();
                        for (int i = 2; i <= 18; i++) {
                            vec.add(rs.getString(i));
                        }
                        dataVector.add(vec);
                    }
                    rs.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(Credit_Sys.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jTextFieldShowInfo.setText("查找失败");
        }
        DefaultTableModel dm = new javax.swing.table.DefaultTableModel();
        dm.setDataVector(dataVector, columnIdentifiers);
        jTable1.setModel(dm);
        dm.fireTableStructureChanged();
        dm.fireTableDataChanged();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void findByDateTextFieldEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findByDateTextFieldEndMouseClicked
        // TODO add your handling code here:
        new TimeChoose(null, true, findByDateTextFieldEnd, 170, 200);
    }//GEN-LAST:event_findByDateTextFieldEndMouseClicked

    private void findByDateTextFieldBeginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findByDateTextFieldBeginMouseClicked
        // TODO add your handling code here:
        new TimeChoose(null, true, findByDateTextFieldBegin, 30, 200);
    }//GEN-LAST:event_findByDateTextFieldBeginMouseClicked

    private void del_dateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_del_dateMouseClicked
        // TODO add your handling code here:
        new TimeChoose(null, true, del_date, 170, 200);
    }//GEN-LAST:event_del_dateMouseClicked

    private void del_displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del_displayActionPerformed
        // TODO add your handling code here:
        String bank = (String) exp_CB.getSelectedItem();
        String date = del_date.getText();
        DBUtil.addItemToList(del_list, date, bank);
    }//GEN-LAST:event_del_displayActionPerformed

    private void del_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del_delActionPerformed
        // TODO add your handling code here:
        String time = del_list.getSelectedValue().toString();
        String bank = exp_CB.getSelectedItem().toString();
        String date = del_date.getText();
        
        if (DBUtil.deleteDataByChoose(date, bank, time)) {
            JOptionPane.showMessageDialog(rootPane, "删除成功！");
            DefaultListModel tempModel = new DefaultListModel();
            del_list.setModel(tempModel);
        } else {
            JOptionPane.showMessageDialog(rootPane, "删除失败！");
        }
        
    }//GEN-LAST:event_del_delActionPerformed

    private void imp_choose1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_choose1ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setMultiSelectionEnabled(false);
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setDialogTitle("选择导入文件");
        jfc.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith("xls") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            public String getDescription() {
                return "Excel文件(*.xls)";
            }
        });

        jfc.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith("xlsx") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            public String getDescription() {
                return "Excel文件(*.xlsx)";
            }
        });

        jfc.showDialog(new JLabel(), "确定");
        File file = jfc.getSelectedFile();
        imp_file1.setText(file.getAbsolutePath());
    }//GEN-LAST:event_imp_choose1ActionPerformed

    private void imp_choose2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_choose2ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setMultiSelectionEnabled(false);
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setDialogTitle("选择导入文件");
        jfc.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith("xls") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            public String getDescription() {
                return "Excel文件(*.xls)";
            }
        });

        jfc.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith("xlsx") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            public String getDescription() {
                return "Excel文件(*.xlsx)";
            }
        });

        jfc.showDialog(new JLabel(), "确定");
        File file = jfc.getSelectedFile();
        imp_file2.setText(file.getAbsolutePath());
    }//GEN-LAST:event_imp_choose2ActionPerformed

    private void exp_displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp_displayActionPerformed
        try {
            DefaultListModel listModel = new DefaultListModel();
            DBConnection db = new DBConnection();
            Connection conn = db.getConnection();
            Statement stmt = conn.createStatement();
            String bank = exp_CB.getSelectedItem().toString();
            ResultSet rs = null;
            if (bank.equals("工商银行")) {
                rs = stmt.executeQuery("select distinct 日期,时间 from icbc_info where 信息完整 = '是'");
            } else if (bank.equals("交通银行")) {
                rs = stmt.executeQuery("select distinct 日期,时间 from bcm_info where 信息完整 = '是'");
            }

            int count = 0;
            while (rs.next()) {
                listModel.add(count++, rs.getString(1) + "    " + rs.getString(2));
            }
            exp_list1.setModel(listModel);
        } catch (SQLException ex) {
            System.out.println("sql error");
        }
    }//GEN-LAST:event_exp_displayActionPerformed

    private void exp_chooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp_chooseActionPerformed
        //构造文件保存对话框
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("导出文件路径");

        //取得文件名输入框并设置指定格式
        JTextField fileNameField = new JTextField();

        chooser.addChoosableFileFilter(new FileFilter() {

            public boolean accept(File f) {
                if (f.getName().endsWith("xls") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            public String getDescription() {
                return "Excel文件(*.xls)";
            }

        });

        //打开对话框
        int result = chooser.showSaveDialog(exp_confirm);

        //文件确定
        if (result == JFileChooser.APPROVE_OPTION) {
            String outPath = chooser.getSelectedFile().getAbsolutePath();
            outPath += fileNameField.getText();
            if (!(outPath.endsWith(".xls") || outPath.endsWith(".XLS"))) {
                outPath += ".xls";
            }
            exp_file.setText(outPath);
        }
    }//GEN-LAST:event_exp_chooseActionPerformed

    private void exp_confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp_confirmActionPerformed
        File fout = new File(exp_file.getText());
        if (fout.exists()) {
            JOptionPane.showMessageDialog(rootPane, "该文件已存在,请更改文件名！");
        } else if (exp_file.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "请选择导出路径！");
        } else {
            if (exp_list1.getSelectedValue() == null) {
                JOptionPane.showMessageDialog(rootPane, "请选择导出批次！");
            } else {
                String str = exp_list1.getSelectedValue().toString();
                String[] sel = str.split("    ");
                String bank = exp_CB.getSelectedItem().toString();
                if (bank.equals("交通银行")) {
                    try {
                        DBConnection db = new DBConnection();
                        Connection conn = db.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery("select 身份证姓名,身份证号码,手机号码,注册时间,"
                                + "驾驶证档案号,犯罪记录A,犯罪记录B,犯罪记录C,本地户籍,本地居住证,已登记但未办证,其他,"
                                + "登记宅电一致,登记手机一致,驾驶证档案号一致"
                                + " from bcm_info where 信息完整 = '是' AND 日期 ='" + sel[0] + "' AND 时间 ='"
                                + sel[1] + "'");
                        //导出到EXCEL表格
                        WritableWorkbook wwb = Workbook.createWorkbook(fout);
                        WritableSheet st = wwb.createSheet("Sheet0", 0);

                        WritableFont font1 = new Font(WritableFont.createFont("宋体"), 12);
                        WritableFont font2 = new Font(WritableFont.createFont("宋体"), 12);

                        WritableCellFormat wcf1 = new WritableCellFormat(font1);
                        wcf1.setBackground(jxl.format.Colour.VERY_LIGHT_YELLOW);
                        wcf1.setAlignment(Alignment.CENTRE);
                        wcf1.setBorder(Border.ALL, BorderLineStyle.THIN);
                        WritableCellFormat wcf2 = new WritableCellFormat(font2);
                        wcf2.setAlignment(Alignment.CENTRE);
                        wcf2.setBackground(jxl.format.Colour.LIGHT_TURQUOISE);
                        wcf2.setBorder(Border.ALL, BorderLineStyle.THIN);
                        WritableCellFormat wcf3 = new WritableCellFormat(font1);
                        st.addCell(new Label(0, 0, "交通银行提供客户信息", wcf1));
                        st.mergeCells(0, 0, 4, 0);
                        st.addCell(new Label(5, 0, "803刑侦", wcf2));
                        st.mergeCells(5, 0, 7, 0);
                        st.addCell(new Label(8, 0, "客户类别", wcf2));
                        st.mergeCells(8, 0, 11, 0);
                        st.addCell(new Label(12, 0, "人口办信息", wcf2));
                        st.mergeCells(12, 0, 13, 0);
                        st.addCell(new Label(14, 0, "驾驶证信息", wcf2));

                        st.addCell(new Label(0, 1, "身份证姓名", wcf1));
                        st.addCell(new Label(1, 1, "身份证号", wcf1));
                        st.addCell(new Label(2, 1, "手机号码", wcf1));
                        st.addCell(new Label(3, 1, "注册时间", wcf1));
                        st.addCell(new Label(4, 1, "驾驶证档案号", wcf1));
                        st.addCell(new Label(5, 1, "A", wcf2));
                        st.addCell(new Label(6, 1, "B", wcf2));
                        st.addCell(new Label(7, 1, "C", wcf2));
                        st.addCell(new Label(8, 1, "本地户籍", wcf2));
                        st.addCell(new Label(9, 1, "本地居住证", wcf2));
                        st.addCell(new Label(10, 1, "已登记但未办证", wcf2));
                        st.addCell(new Label(11, 1, "其他", wcf2));
                        st.addCell(new Label(12, 1, "宅电是否与登记宅电一致", wcf2));
                        st.addCell(new Label(13, 1, "手机是否与登记手机一致", wcf2));
                        st.addCell(new Label(14, 1, "驾驶证档案号是否一致", wcf2));

                        ResultSetMetaData m = rs.getMetaData();
                        int col = m.getColumnCount();
                        int row = 2;
                        while (rs.next()) {
                            for (int i = 1; i <= col; i++) {
                                st.addCell(new Label(i - 1, row, rs.getString(i), wcf3));
                            }
                            row++;
                        }

                        wwb.write();
                        wwb.close();
                        //将已导出数据填入历史表
                        Calendar cal = Calendar.getInstance();
                        java.util.Date date = cal.getTime();
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
                        String myTime = timeFormat.format(date);
                        String myDate = dateFormat.format(date);

                        rs.first();
                        String s = "";
                        PreparedStatement pstatement = conn.prepareStatement("insert into bcm_info_his(身份证姓名,"
                                + "身份证号码,手机号码,注册时间,驾驶证档案号,犯罪记录A,犯罪记录B,犯罪记录C,"
                                + "本地户籍,本地居住证,已登记但未办证,其他,登记宅电一致,登记手机一致,"
                                + "驾驶证档案号一致,日期,时间)"
                                + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        String[] strArr = new String[col + 1];
                        int rows = 0;
                        for (int i = 1; i <= col; i++) {
                            strArr[i] = rs.getString(i);
                        }
                        do {
                            rows++;
                            for (int i = 1; i <= col; i++) {
                                if (strArr[i] != null && strArr[i].equals("")) {
                                    pstatement.setString(i, null);
                                } else {
                                    pstatement.setString(i, rs.getString(i));
                                }
                            }
                            pstatement.setString(16, myDate);
                            pstatement.setString(17, myTime);
                            pstatement.execute();

                        } while (rs.next());
                        pstatement.close();
                        //删除操作表中已导出数据
                        stmt.executeUpdate("delete from bcm_info where 信息完整 = '是' AND 日期 ='"
                                + sel[0] + "' AND 时间 ='" + sel[1] + "'");

                        JOptionPane.showMessageDialog(rootPane, "导出成功！");
                        rs.close();
                        conn.close();
                        Log.exportLog("交通银行", myDate, myTime, rows);
                    } catch (SQLException | IOException | WriteException ex) {
                        ex.printStackTrace();
                    }
                } else if (bank.equals("工商银行")) {
                    try {
                        DBConnection db = new DBConnection();
                        Connection conn = db.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery("select 证件类型,证件号码,姓名,住宅地址市县,住宅地址区,"
                                + "住宅地址,住宅电话区号,住宅电话,手机,单位全称,犯罪记录A,犯罪记录B,犯罪记录C,"
                                + "本地户籍,本地居住证,已登记但未办证,其他,"
                                + "户籍地址一致,居住地址一致,登记宅电一致,登记手机一致,登记单位一致,"
                                + "社保缴费状态,申请人单位一致,拥有车辆"
                                + " from icbc_info where 信息完整 = '是' AND 日期 ='" + sel[0] + "' AND 时间 ='"
                                + sel[1] + "'");
                        //导出到EXCEL表格
                        WritableWorkbook wwb = Workbook.createWorkbook(fout);
                        WritableSheet st = wwb.createSheet("Sheet0", 0);

                        WritableFont font1 = new Font(WritableFont.createFont("宋体"), 12);
                        WritableFont font2 = new Font(WritableFont.createFont("宋体"), 12);

                        WritableCellFormat wcf1 = new WritableCellFormat(font1);
                        wcf1.setBackground(jxl.format.Colour.VERY_LIGHT_YELLOW);
                        wcf1.setAlignment(Alignment.CENTRE);
                        wcf1.setBorder(Border.ALL, BorderLineStyle.THIN);
                        WritableCellFormat wcf2 = new WritableCellFormat(font2);
                        wcf2.setAlignment(Alignment.CENTRE);
                        wcf2.setBackground(jxl.format.Colour.LIGHT_TURQUOISE);
                        wcf2.setBorder(Border.ALL, BorderLineStyle.THIN);
                        WritableCellFormat wcf3 = new WritableCellFormat(font1);

                        st.addCell(new Label(0, 0, "工商银行提供客户信息", wcf1));
                        st.mergeCells(0, 0, 9, 0);
                        st.addCell(new Label(10, 0, "803刑侦", wcf2));
                        st.mergeCells(10, 0, 12, 0);
                        st.addCell(new Label(13, 0, "客户类别", wcf2));
                        st.mergeCells(13, 0, 16, 0);
                        st.addCell(new Label(17, 0, "人口办信息", wcf2));
                        st.mergeCells(17, 0, 21, 0);
                        st.addCell(new Label(22, 0, "社会养老保险信息", wcf2));
                        st.mergeCells(22, 0, 23, 0);
                        st.addCell(new Label(24, 0, "是否拥有车辆", wcf2));
                        st.mergeCells(24, 0, 24, 1);

                        st.addCell(new Label(0, 1, "证件类型", wcf1));
                        st.addCell(new Label(1, 1, "证件号码", wcf1));
                        st.addCell(new Label(2, 1, "姓名", wcf1));
                        st.addCell(new Label(3, 1, "主卡住宅地址市(县)", wcf1));
                        st.addCell(new Label(4, 1, "主卡住宅地址区", wcf1));
                        st.addCell(new Label(5, 1, "主卡住宅地址", wcf1));
                        st.addCell(new Label(6, 1, "主卡住宅电话区号", wcf1));
                        st.addCell(new Label(7, 1, "主卡住宅电话号码", wcf1));
                        st.addCell(new Label(8, 1, "主卡手机", wcf1));
                        st.addCell(new Label(9, 1, "主卡单位全称", wcf1));
                        st.addCell(new Label(10, 1, "犯罪记录A", wcf2));
                        st.addCell(new Label(11, 1, "犯罪记录B", wcf2));
                        st.addCell(new Label(12, 1, "犯罪记录C", wcf2));
                        st.addCell(new Label(13, 1, "本地户籍", wcf2));
                        st.addCell(new Label(14, 1, "本地居住证", wcf2));
                        st.addCell(new Label(15, 1, "已登记但未办证", wcf2));
                        st.addCell(new Label(16, 1, "其他", wcf2));
                        st.addCell(new Label(17, 1, "宅址是否与户籍地址一致", wcf2));
                        st.addCell(new Label(18, 1, "宅址是否与居住地址一致", wcf2));
                        st.addCell(new Label(19, 1, "宅电是否与登记宅电一致", wcf2));
                        st.addCell(new Label(20, 1, "手机是否与登记手机一致", wcf2));
                        st.addCell(new Label(21, 1, "工作单位是否与登记单位一致", wcf2));
                        st.addCell(new Label(22, 1, "社保缴费状态", wcf2));
                        st.addCell(new Label(23, 1, "缴费单位与申请人单位是否一致", wcf2));

                        ResultSetMetaData m = rs.getMetaData();
                        int col = m.getColumnCount();
                        int row = 2;
                        while (rs.next()) {
                            for (int i = 1; i <= col; i++) {
                                st.addCell(new Label(i - 1, row, rs.getString(i), wcf3));
                            }
                            row++;
                        }

                        wwb.write();
                        wwb.close();
                        //将已导出数据填入历史表              
                        Calendar cal = Calendar.getInstance();
                        java.util.Date date = cal.getTime();
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
                        String myTime = timeFormat.format(date);
                        String myDate = dateFormat.format(date);

                        rs.first();
                        String s = "";
                        PreparedStatement pstatement = conn.prepareStatement("insert into icbc_info_his"
                                + "(证件类型,证件号码,姓名,住宅地址市县,住宅地址区,住宅地址,住宅电话区号,"
                                + "住宅电话,手机,单位全称,犯罪记录A,犯罪记录B,犯罪记录C,"
                                + "本地户籍,本地居住证,已登记但未办证,其他,"
                                + "户籍地址一致,居住地址一致,登记宅电一致,登记手机一致,登记单位一致,"
                                + "社保缴费状态,申请人单位一致,拥有车辆,日期,时间)"
                                + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        String[] strArr = new String[col + 1];
                        int rows = 0;
                        for (int i = 1; i <= col; i++) {
                            strArr[i] = rs.getString(i);
                        }
                        do {
                            rows++;
                            for (int i = 1; i <= col; i++) {
                                if (strArr[i] != null && strArr[i].equals("")) {
                                    pstatement.setString(i, null);
                                } else {
                                    pstatement.setString(i, rs.getString(i));
                                }
                            }
                            pstatement.setString(26, myDate);
                            pstatement.setString(27, myTime);
                            pstatement.execute();

                        } while (rs.next());
                        pstatement.close();

                        //删除操作表中已导出数据               
                        stmt.executeUpdate("delete from icbc_info where 信息完整 = '是' AND 日期 ='"
                                + sel[0] + "' AND 时间 ='" + sel[1] + "'");

                        JOptionPane.showMessageDialog(rootPane, "导出成功！");
                        rs.close();
                        conn.close();
                        Log.exportLog("工商银行", myDate, myTime, rows);
                    } catch (SQLException | IOException | WriteException ex) {
                        ex.printStackTrace();
                    }
                }
                DefaultListModel tempModel = new DefaultListModel();
                exp_list1.setModel(tempModel);
            }
        }
    }//GEN-LAST:event_exp_confirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Credit_Sys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Credit_Sys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Credit_Sys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Credit_Sys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Credit_Sys().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox del_choose;
    private javax.swing.JTextField del_date;
    private javax.swing.JButton del_del;
    private javax.swing.JButton del_display;
    private javax.swing.JList del_list;
    private javax.swing.JComboBox exp_CB;
    private javax.swing.JButton exp_choose;
    private javax.swing.JButton exp_confirm;
    private javax.swing.JButton exp_display;
    private javax.swing.JTextField exp_file;
    private javax.swing.JList exp_list1;
    private javax.swing.JTextField findByDateTextFieldBegin;
    private javax.swing.JTextField findByDateTextFieldEnd;
    private javax.swing.JTextField findByIdTextField;
    private javax.swing.JComboBox imp_CB1;
    private javax.swing.JComboBox imp_CB2;
    private javax.swing.JButton imp_choose1;
    private javax.swing.JButton imp_choose2;
    private javax.swing.JButton imp_confirm1;
    private javax.swing.JButton imp_confirm2;
    private javax.swing.JTextField imp_file1;
    private javax.swing.JTextField imp_file2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldShowInfo;
    private javax.swing.JOptionPane success_info;
    // End of variables declaration//GEN-END:variables
}
